---
- name: Insert Executable Binary Path into .bashrc for VMware Postgres {{ pgsql.major_version }}
  lineinfile:
    path: "{{ item }}"
    line: "export PATH={{ common.pgsql_bin_dir }}:$PATH"
  with_items:
    - "{{ pgsql.base_dir }}/.bash_profile"
    - "{{ pgsql.home_dir }}/.bashrc"


- name: Create ETCD Config Directory
  file:
    path: "/etc/etcd"
    state: directory
    owner: root
    group: root
    mode: 0755


- name: Create the etcd.yml Configuration File
  template: src={{ item.src_fn }} dest={{ item.dest_fn }} owner={{ item.owner }} group={{ item.group }} mode=644 force=yes
  register: create_etcd_config
  with_items:
    - { src_fn: 'etcd.yml.j2', dest_fn: '{{ pgsql.base_dir }}/etcd.yml', owner: 'postgres', group: 'postgres' }
    - { src_fn: 'etcd.conf.j2', dest_fn: '/etc/etcd/etcd.conf', owner: 'root', group: 'root' }


- name: Tune the Value of HEARTBEAT INTERNAL and ELECTION TIMEOUT
  replace:
    dest: /etc/etcd/etcd.conf
    regexp: "{{ item.regexp }}"
    replace: "{{ item.line }}"
  register: modify_etcd_config
  with_items:
    - { regexp: '#ETCD_HEARTBEAT_INTERVAL="1000"', line: 'ETCD_HEARTBEAT_INTERVAL="10000"', state: present }
    - { regexp: '#ETCD_ELECTION_TIMEOUT="10000"', line: 'ETCD_ELECTION_TIMEOUT="100000"', state: present }


- name: Copy Systemd Configuration of ETCD into /etc/systemd/system
  template: src=etcd.systemd.j2 dest=/etc/systemd/system/etcd.service owner=root group=root mode=644 force=yes
  register: copy_etcd_systemd_config


- name: Reload and Start ETCD through Systemd
  systemd:
    name: etcd
    enabled: yes
    state: started
    daemon_reload: yes
  register: start_etcd_systemd


- name: Lists the Members and Identifies the Current Leader
  become_user: postgres
  shell: |
    export ETCDCTL_API=3 && etcdctl member list
  register: list_members_leader


- name: Set Data Directory
  become_user: postgres
  file: path={{ pgsql.base_dir }}/patroni_data state=directory owner=postgres group=postgres
  register: set_data_directory


- name: Create the patroni.yml Configuration File
  become_user: postgres
  template: src=patroni.yml.j2 dest={{ pgsql.base_dir }}/patroni.yml owner=postgres group=postgres mode=644 force=yes
  register: create_patroni_config


- name: Copy Systemd Configuration of Patroni into /etc/systemd/system
  template: src=patroni.systemd.j2 dest=/etc/systemd/system/patroni.service owner=root group=root mode=644 force=yes
  register: copy_patroni_systemd_config


- name: Change the Permissions on the Database Directory in {{ pgsql.base_dir }} Directory
  become_user: postgres
  file:
    path: "{{ pgsql.base_dir }}/{{ item }}"
    state: directory
    mode: 0750
  register: change_data_directories_permission
  with_items:
    - "backups"
    - "data"
    - "patroni_data"
  when: pgsql.major_version|int >= 11


- name: Change the Permissions on the Database Directory in {{ pgsql.base_dir }} Directory
  become_user: postgres
  file:
    path: "{{ pgsql.base_dir }}/{{ item }}"
    state: directory
    mode: 0700
  register: change_data_directories_permission
  with_items:
    - "backups"
    - "data"
    - "patroni_data"
  when: pgsql.major_version|int < 11


- name: Change the Permissions on the /tmp Directory
  file:
    path: /tmp
    state: directory
    mode: 0777
  register: change_tmp_dir_permission


- name: Reload and Start Systemd Service of VMware Postgres Patroni
  systemd:
    name: patroni
    enabled: yes
    state: started
    daemon_reload: yes
  register: start_patroni_systemd_service


#- name: Remove Cluster
#  become_user: postgres
#  shell: |
#    export LC_ALL=en_US.utf-8 && {{ _patronictl_path }} -c /var/lib/pgsql/patroni.yml remove {{ cluster_name }} <<EOF
#    {{ cluster_name }}
#    Yes I am aware
#    EOF
#  register: remove_cluster
#- debug: msg={{ remove_cluster }}
#  when: print_debug


#- name: Reinitialize Cluster
#  become_user: postgres
#  shell: |
#    export LC_ALL=en_US.utf-8 && {{ _patronictl_path }} -c /var/lib/pgsql/patroni.yml reinit {{ cluster_name }} <<EOF
#    {{ inventory_hostname }}
#    y
#    y
#    EOF
#  register: reinit_cluster
#- debug: msg={{ reinit_cluster }}
#  when: print_debug


- name: Pause for 1 Minutes to Wait for Compleiting Initializaion of Patroni Cluster
  pause:
    minutes: 1


- name: Run the patronictl Command-Line Utility to View the Cluster State with Patroni Started on All Worker Nodes
  become_user: postgres
  shell: |
    {{ _patroni.ctl_path }} -c {{ pgsql.base_dir }}/patroni.yml list
  register: list_patroni
- debug: msg={{ list_patroni }}
  when: print_debug


