---
- name: Stop the Stanza on the Repository Host ( Only Needs to be Done on This Host )
  become: true
  become_user: postgres
  command: /usr/bin/pgbackrest --stanza=main --log-level-console=info stop
  register: stanza_stopped
  when: inventory_hostname in groups['repository']
- debug: msg={{ stanza_stopped }}


- name: Delete main.stop File for PGBackRest
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/pgbackrest/main.stop"
  when: inventory_hostname in groups['repository']


- name: Delete the Stanza on the Repository Host ( Only Needs to be Done on This Host )
  become: true
  become_user: postgres
  command: /usr/bin/pgbackrest --stanza=main --log-level-console=info stanza-delete --force
  ignore_errors: yes
  register: stanza_deleted
  when: inventory_hostname in groups['repository']
- debug: msg={{ stanza_deleted }}


- name: Kill Process of PGBackRest on Repository
  become: true
  become_user: postgres
  command: killall pgbackrest
  ignore_errors: yes
  register: pgbackrest_killed
  when: inventory_hostname in groups['repository']
- debug: msg={{ pgbackrest_killed }}


- name: Delete Configuration File for PGBackRest
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/etc/pgbackrest/pgbackrest.conf"


- name: Delete Repository Location for PGBackRest
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/var/lib/pgbackrest"
  when: inventory_hostname in groups['repository']


- name: Delete SSH Keys to Allow Password-Less Login between All Hosts
  become: true
  become_user: root
  file:
    path: "/var/lib/pgsql/{{ item }}"
    state: absent
  with_items:
    - ".ssh/id_rsa"
    - ".ssh/id_rsa.pub"
    - ".ssh/authorized_keys"
    - ".ssh"


- name: Delete Directories and Files in all Hosts
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/var/log/pgbackrest"
    - "/etc/pgbackrest/conf.d"
    - "/etc/pgbackrest"


# Commented due to taking too much time
#- name: Uninstall RPM Packages of pgBackrest Dependencies
#  become: true
#  become_user: root
#  yum:
#    name: "{{ item }}"
#    state: absent
#  register: pgbackrest_dependancies_uninstalled
#  with_items:
#    - perl-Time-HiRes
#    - perl-Digest-SHA
#    - perl-JSON-PP


- name: Delete Lines for PGBackRest in patroni.yml
  become: true
  become_user: postgres
  lineinfile:
    dest: /var/lib/pgsql/patroni.yml
    regexp: "{{ item.regexp }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^    archive_mode:*', state: absent }
    - { regexp: '^    archive_command:*', state: absent }
  when: inventory_hostname in groups['postgres-ha']


- name: Return Previous Values in patroni.yml for PGBackRest
  become: true
  become_user: root
  lineinfile:
    dest: /var/lib/pgsql/patroni.yml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: "^  listen: '0.0.0.0:5532'", line: "  listen: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:5432'", state: present }
    - { regexp: "^  connect_address: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:5532'", line: "  connect_address: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:5432'", state: present }
    - { regexp: "^    port: 5532", line: "    port: 5432", state: present }
  when: inventory_hostname in groups['postgres-ha']


#- name: Replace String for Traditional Archive and Restore Command
#  become: true
#  become_user: root
#  replace:
#    path: /var/lib/pgsql/patroni.yml
#    regexp: '{{ item.regexp }}'
#    replace: "{{ item.replace }}"
#  with_items:
#    - { regexp: '^#        archive_command:', replace: '        archive_command:' }
#    - { regexp: '^#        restore_command:', replace: '        restore_command:' }
#  when: inventory_hostname in groups['postgres-ha']


- name: Reload and Start Patroni Systemd Service
  become: true
  become_user: root
  systemd:
    name: patroni
    daemon_reload: yes
    state: restarted
  when: inventory_hostname in groups["postgres-ha"]


- name: Check the Config on Each of the Two Postgres Hosts
  become: true
  become_user: postgres
  shell: ( {{ patronictl_path }} -c /var/lib/pgsql/patroni.yml list )
  register: patroni_listed
  when: inventory_hostname in groups["postgres-ha"]
- debug: msg={{ patroni_listed }}


#- name: Uninstall VMware Postgres on all Hosts
#  become: true
#  yum:
#    name: "{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}"
#    state: absent
#  async: 180
#  poll: 5
#  when: inventory_hostname in groups['repository']


#- name: Remove the VMware Postgres RPM File to All Hosts in Cluster
#  file:
#    path: /home/jomoon/{{ package_name }}-{{ major_version }}.{{ minor_version }}-{{ patch_version }}.{{ rhel_version }}.x86_64.rpm
#    state: absent
#  when: inventory_hostname in groups['repository']

