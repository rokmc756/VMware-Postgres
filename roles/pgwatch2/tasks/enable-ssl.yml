---
- name: Create SSL Directory
  become_user: postgres
  file:
    path: "{{ _ssl.ssl_dir }}"
    state: directory
    mode: 0755
    owner: postgres
    group: postgres
  register: create_ssl_dir


- name: Generate a CA Certificate Private Key
  become_user: postgres
  shell: openssl genrsa -out {{ ssl.ssl_dir }}/ca.key 4096
  register: gen_ca_cert_priv_key


- name: Generate the CA Certificate
  become: true
  become_user: postgres
  shell: |
    openssl req -x509 -new -nodes -sha512 -days 3650 \
    -subj "/C={{ ssl.ssl_country }}/ST={{ ssl.ssl_state }}/L={{ ssl.ssl_location }}/O={{ ssl.ssl_organization }}/OU={{ ssl.ssl_organization_unit }}/CN={{ ssl.ssl_common_name }}/emailAddress={{ ssl.ssl_email }}" \
    -key {{ ssl.ssl_dir }}/ca.key \
    -out {{ ssl.ssl_dir }}/ca.crt
  register: gen_ca_cert


- name: Generate a Private Key
  become_user: postgres
  shell: openssl genrsa -out {{ ssl.ssl_dir }}/server.key 4096
  register: gen_priv_key


- name: Generate a Certificate Signing Request (CSR)
  become_user: postgres
  shell: |
    openssl req -sha512 -new \
    -subj "/C={{ ssl.ssl_country }}/ST={{ ssl.ssl_state }}/L={{ ssl.ssl_location }}/O={{ ssl.ssl_organization }}/OU={{ ssl.ssl_organization_unit }}/CN={{ ssl.ssl_common_name }}/emailAddress={{ ssl.ssl_email }}" \
    -key {{ ssl.ssl_dir }}/server.key \
    -out {{ ssl.ssl_dir }}/server.csr
  register: gen_cert_sign_req


- name: Copy an x509 v3 Extension File
  template: src=v3.ext.j2 dest={{ ssl.ssl_dir }}/v3.ext owner=postgres group=postgres mode=644 force=yes
  register: copy_x509_v3_ext


- name: Replace the CRS and CRT File Names
  become_user: postgres
  shell: |
    openssl x509 -req -sha512 -days 3650 -extfile {{ ssl.ssl_dir }}/v3.ext \
    -CA {{ ssl.ssl_dir }}/ca.crt -CAkey {{ ssl.ssl_dir }}/ca.key -CAcreateserial \
    -in {{ ssl.ssl_dir }}/server.csr \
    -out {{ ssl.ssl_dir }}/server.crt
  register: replace_csr_crt


- name: Add SSL Configuration File to Authenticate SSL user into Postgres Database Server
  become: true
  become_user: postgres
  lineinfile:
    dest: "{{ pgsql.base_dir }}/data/{{ item.file }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { file: "pg_hba.conf",      line: "hostssl  all         all           0.0.0.0/0                         md5",  state: present }
    - { file: "pg_hba.conf",      line: "hostssl  all         all           {{ pgsql_network_range }}         md5",  state: present }
    - { file: "postgresql.conf",  line: "listen_addresses = '*'",                                                    state: present }
    - { file: "postgresql.conf",  line: "port = 5432",                                                               state: present }
    - { file: "postgresql.conf",  line: "ssl = on",                                                                  state: present }
    - { file: "postgresql.conf",  line: "ssl_cert_file = '{{ pgsql.base_dir }}/certs/server.crt'",                   state: present }
    - { file: "postgresql.conf",  line: "ssl_key_file = '{{ pgsql.base_dir }}/certs/server.key'",                    state: present }
  register: ssl_postgres_config


#- name: Stop Postgres Instance Manually to Apply Systemd Unit
#  become: true
#  become_user: postgres
#  shell: /opt/vmware/postgres/15/bin/pg_ctl stop -D /var/lib/pgsql/data -s -m fast
#  register: postgres_instance_stoppped


#- name: Copy Systemd Configuration of PostgreSQL into /etc/systemd/system
#  become: true
#  become_user: root
#  template: src=postgresql.systemd.j2 dest=/etc/systemd/system/postgresql.service owner=root group=root mode=644 force=yes
#  register: postgresql_systemd_config_copied


#- name: Reload and Start PostgreSQL through Systemd
#  become: true
#  become_user: root
#  systemd:
#    daemon_reexec: true
#    daemon_reload: true
#    name: postgresql
#    enabled: true
#    state: started
#  register: postgresql_systemd_restarted

